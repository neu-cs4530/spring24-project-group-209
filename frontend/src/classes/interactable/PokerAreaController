import _ from 'lodash';
import {
  PokerAction,
  GameArea,
  GameStatus,
  PokerGameState,
  PokerMove,
} from '../../types/CoveyTownSocket';
import PlayerController from '../PlayerController';
import GameAreaController, {
  GameEventTypes,
  NO_GAME_IN_PROGRESS_ERROR,
  NO_GAME_STARTABLE,
  PLAYER_NOT_IN_GAME_ERROR,
} from './GameAreaController';

export type PokerCell = PokerMove | integer | undefined;
export type ConnectFourEvents = GameEventTypes & {
  boardChanged: (board: PokerCell[][]) => void;
  turnChanged: (isOurTurn: boolean) => void;
};
export const POKER_ROWS = 4;
export const POKER_COLS = 8;

function createEmptyBoard(): PokerCell[][] {
  const board = new Array(POKER_ROWS);
  for (let i = 0; i < POKER_ROWS; i++) {
    board[i] = new Array(POKER_COLS).fill(undefined);
  }
  return board;
}

/**
 * This class is responsible for managing the state of the Connect Four game, and for sending commands to the server
 */
export default class PokerAreaController extends GameAreaController<
  PokerGameState,
  ConnectFourEvents
> {
  protected _board: PokerCell[][] = createEmptyBoard();

  /**
   * Returns the current state of the board.
   *
   * The board is a 6x7 array of ConnectFourCell, which is either 'Red', 'Yellow', or undefined.
   *
   * The 2-dimensional array is indexed by row and then column, so board[0][0] is the top-left cell,
   */
  get board(): PokerCell[][] {
    return this._board;
  }

  /**
   * Returns the player who won the game, if there is one, or undefined otherwise
   */
  get winner(): PlayerController | undefined {
    const winner = this._model.game?.state.winner;
    if (winner) {
      return this.occupants.find(eachOccupant => eachOccupant.id === winner);
    }
    return undefined;
  }

  /**
   * Returns the number of moves that have been made in the game
   */
  get moveCount(): number {
    return this._model.game?.state.moves.length || 0;
  }

  /**
   * Returns true if it is our turn to make a move, false otherwise
   */
  get isOurTurn(): boolean {
    return this.whoseTurn?.id === this._townController.ourPlayer.id;
  }

  /**
   * Returns true if the current player is in the game, false otherwise
   */
  get isPlayer(): boolean {
    return this._model.game?.players.includes(this._townController.ourPlayer.id) ?? false;
  }

  /**
   * Returns the status of the game
   * If there is no game, returns 'WAITING_FOR_PLAYERS'
   */
  get status(): GameStatus {
    const status = this._model.game?.state.status;
    if (!status) {
      return 'WAITING_FOR_PLAYERS';
    }
    return status;
  }

  /**
   * Returns the player whose turn it is, if the game is in progress
   * Returns undefined if the game is not in progress
   *
   * Follows the same logic as the backend, respecting the firstPlayer field of the gameState
   */
  get whoseTurn(): PlayerController | undefined {
    //Not implemented
    return undefined;
  }

  /**
   * Returns true if the game is empty - no occupants in the area
   *
   */
  isEmpty(): boolean {
    return this.occupants.length === 0;
  }

  /**
   * Returns true if the game is not empty and the game is not waiting for players
   */
  public isActive(): boolean {
    return !this.isEmpty() && this.status !== 'WAITING_FOR_PLAYERS';
  }

  /**
   * Updates the internal state of this ConnectFourAreaController based on the new model.
   *
   * Calls super._updateFrom, which updates the occupants of this game area and other
   * common properties (including this._model)
   *
   * If the board has changed, emits a boardChanged event with the new board.
   * If the board has not changed, does not emit a boardChanged event.
   *
   * If the turn has changed, emits a turnChanged event with the new turn (true if our turn, false otherwise)
   * If the turn has not changed, does not emit a turnChanged event.
   */
  protected _updateFrom(newModel: GameArea<PokerGameState>): void {
    const wasOurTurn = this.isOurTurn;
    super._updateFrom(newModel);
    const newGame = newModel.game;
    if (newGame) {
      const newBoard = createEmptyBoard();
      newGame.state.moves.forEach(move => {
        if(move.moveType == 'RAISE'){
            if (newBoard[1][3] == undefined) {
                newBoard[1][3] = move.raiseAmount;
            }
            else {
                newBoard[1][3] += move.raiseAmount;
            }
        } else if(move.moveType == 'FOLD'){
            newBoard[3][move.player] = undefined;
            newBoard[2][move.player] = undefined;
        } else if(move.moveType == 'CALL'){
            newBoard[1][3] += move.raiseAmount;
        } else if(move.moveType == 'DEAL'){
            // 0 1 2 3 4 5 6 7
            if (move.player == undefined) {
                for (let i = 2; i < 7; i++) {
                    if (newBoard[0][i] == undefined) {
                        newBoard[0][i] = move.card;
                        break;
                    }
                }
            }
            else if (newBoard[3][move.player] == undefined) {
                newBoard[3][move.player] = move.card;
            } else {
                newBoard[2][move.player] = move.card;
            }
        }
      });
      if (!_.isEqual(newBoard, this._board)) {
        this._board = newBoard;
        this.emit('boardChanged', this._board);
      }
    }
    const isOurTurn = this.isOurTurn;
    if (wasOurTurn !== isOurTurn) this.emit('turnChanged', isOurTurn);
  }

  /**
   * Sends a request to the server to start the game.
   *
   * If the game is not in the WAITING_TO_START state, throws an error.
   *
   * @throws an error with message NO_GAME_STARTABLE if there is no game waiting to start
   */
  public async startGame(): Promise<void> {
    const instanceID = this._instanceID;
    if (!instanceID || this._model.game?.state.status !== 'WAITING_TO_START') {
      throw new Error(NO_GAME_STARTABLE);
    }
    await this._townController.sendInteractableCommand(this.id, {
      gameID: instanceID,
      type: 'StartGame',
    });
  }

  /**
   * Sends a request to the server to place the current move in the poker game.
   *
   * @param col Column to place the game piece in
   */
  public async makeMove(move: PokerMove): Promise<void> {
    //not implemented
  }
}
